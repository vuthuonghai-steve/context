openapi: 3.0.0
info:
  title: Product and Category API
  version: 1.0.0
  description: API for managing products, categories for both public users and administrators.

paths:
  # ===================================================================
  # Public Product Endpoints
  # ===================================================================
  /api/products:
    get:
      summary: List, search, and filter products
      description: Retrieves a paginated list of products, with support for searching, filtering, and sorting.
      tags:
        - Products
      parameters:
        - name: q
          in: query
          schema: { type: string }
          description: Search keyword.
        - name: category
          in: query
          schema: { type: string }
          description: Filter by category slug.
        - name: brand
          in: query
          schema: { type: string }
          description: Filter by brand slug.
        - name: min_price
          in: query
          schema: { type: number }
          description: Filter by minimum price.
        - name: max_price
          in: query
          schema: { type: number }
          description: Filter by maximum price.
        - name: rating
          in: query
          schema: { type: integer, minimum: 1, maximum: 5 }
          description: Filter by minimum average rating.
        - name: inverter
          in: query
          schema: { type: boolean }
          description: Filter by products with Inverter technology.
        - name: has_grill
          in: query
          schema: { type: boolean }
          description: Filter by products with a grill function.
        - name: sort
          in: query
          schema:
            type: string
            enum: [price_asc, price_desc, latest]
          description: Sort order for the results.
      responses:
        '200':
          description: A paginated list of products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '../models/product.yaml'
                  links:
                    type: object # For pagination
                  meta:
                    type: object # For pagination

  /api/products/{slug}:
    get:
      summary: Get product by slug
      description: Retrieves a single product by its URL-friendly slug.
      tags:
        - Products
      parameters:
        - name: slug
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: A single product.
          content:
            application/json:
              schema:
                $ref: '../models/product.yaml'
        '404':
          description: Product not found.

  # ===================================================================
  # Public Category Endpoints
  # ===================================================================
  /api/categories:
    get:
      summary: List categories
      tags:
        - Categories
      responses:
        '200':
          description: A list of all active categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../models/category.yaml'

  # ===================================================================
  # Admin Product Endpoints
  # ===================================================================
  /api/admin/products:
    get:
      summary: '[Admin] List all products'
      description: Retrieves a paginated list of all products for administrative purposes.
      tags:
        - Admin - Products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of products.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
    post:
      summary: '[Admin] Create a new product'
      description: Adds a new product to the database.
      tags:
        - Admin - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../models/product.yaml' # Or a specific request DTO
      responses:
        '201':
          description: Product created successfully.
        '422':
          description: Validation error.

  /api/admin/products/{id}:
    get:
      summary: '[Admin] Get a single product by ID'
      description: Retrieves detailed information for a single product by its ID.
      tags:
        - Admin - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: A single product.
        '404':
          description: Product not found.
    put:
      summary: '[Admin] Update a product'
      description: Updates an existing product's information.
      tags:
        - Admin - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../models/product.yaml' # Or a specific request DTO
      responses:
        '200':
          description: Product updated successfully.
        '404':
          description: Product not found.
        '422':
          description: Validation error.
    delete:
      summary: '[Admin] Delete a product'
      description: Deletes a product from the database.
      tags:
        - Admin - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Product deleted successfully.
        '404':
          description: Product not found.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
